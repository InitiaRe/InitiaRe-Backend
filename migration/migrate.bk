package main

import (
	"fmt"
	"os"

	"InitiaRe-website/config"
	article "InitiaRe-website/internal/article/entity"
	articleCategory "InitiaRe-website/internal/article_category/entity"
	user "InitiaRe-website/internal/auth/entity"
	category "InitiaRe-website/internal/category/entity"
	"InitiaRe-website/internal/models"
	storage "InitiaRe-website/internal/storage/entity"
	todo "InitiaRe-website/internal/todo/entity"
	school "InitiaRe-website/internal/school/entity"
	rating "InitiaRe-website/internal/rating/entity"
	userInfo "InitiaRe-website/internal/user_info/entity"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

type migrateCfg struct {
	seedData            bool
	migrateSchema       bool
	migrateRelationship bool
}

func main() {

	// Init log
	zerolog.TimeFieldFormat = zerolog.TimeFormatUnix
	zerolog.SetGlobalLevel(zerolog.DebugLevel)
	log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})

	cfg := migrateCfg{
		seedData:            false,
		migrateSchema:       true,
		migrateRelationship: false,
	}

	// Connect to database
	c := config.GetConfig()
	sslrootcert := "./cert/db_pub_cert.pem"
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%d sslmode=verify-full sslrootcert=%s", c.PostgreSQL.Host, c.PostgreSQL.User, c.PostgreSQL.Password, c.PostgreSQL.DBName, c.PostgreSQL.Port, sslrootcert)

	log.Info().Msg("Connecting database ...")
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Error),
	})
	if err != nil {
		log.Fatal().Msg("failed to connect database")
	}

	log.Info().Msgf("Connected to database [%v] successfully", c.PostgreSQL.DBName)

	// Migrate the schema
	if cfg.migrateSchema {
		log.Info().Msg("Run migrate schema ...")

		if !db.Migrator().HasTable(&user.User{}) {
			log.Info().Msg("Create table user ...")
			db.Migrator().CreateTable(&user.User{})
		}

		if !db.Migrator().HasTable(&todo.Todo{}) {
			log.Info().Msg("Create table todo ...")
			db.Migrator().CreateTable(&todo.Todo{})
		}

		if !db.Migrator().HasTable(&userInfo.UserInfo{}) {
			log.Info().Msg("Create table user_info ...")
			db.Migrator().CreateTable(&userInfo.UserInfo{})
		}

		if !db.Migrator().HasTable(&article.Article{}) {
			log.Info().Msg("Create table article ...")
			db.Migrator().CreateTable(&article.Article{})
		}

		if !db.Migrator().HasTable(&articleCategory.ArticleCategory{}) {
			log.Info().Msg("Create table article_category ...")
			db.Migrator().CreateTable(&articleCategory.ArticleCategory{})
		}

		if !db.Migrator().HasTable(&rating.Rating{}) {
			log.Info().Msg("Create table rating ...")
			db.Migrator().CreateTable(&rating.Rating{})
		}

		if !db.Migrator().HasTable(&category.Category{}) {
			log.Info().Msg("Create table category ...")
			db.Migrator().CreateTable(&category.Category{})
		}

		if !db.Migrator().HasTable(&storage.Storage{}) {
			log.Info().Msg("Create table storage ...")
			db.Migrator().CreateTable(&storage.Storage{})
		}

		if !db.Migrator().HasTable(&models.Status{}) {
			log.Info().Msg("Create table status ...")
			db.Migrator().CreateTable(&models.Status{})
		}

		if !db.Migrator().HasTable(&school.School{}) {
			log.Info().Msg("Create table school ...")
			db.Migrator().CreateTable(&school.School{})
		}

		log.Info().Msg("Migrate schemas done")
	}

	// Migrate relationship
	if cfg.migrateRelationship {
		log.Info().Msg("Run migrate relationship ...")

		if db.Migrator().HasTable(&rating.Rating{}) {
			if !db.Migrator().HasConstraint(&rating.Rating{}, "initiare_rating_un") {
				log.Info().Msg("Create constraint table rating (user-article-un) ...")
				db.Exec("ALTER TABLE public.\"initiaRe_rating\" ADD CONSTRAINT initiare_rating_un UNIQUE (user_id,article_id)")
			}
		}

		if db.Migrator().HasTable(&article.Article{}) && db.Migrator().HasTable(&category.Category{}) {
			if !db.Migrator().HasConstraint(&article.Article{}, "initiare_article_category_id_fk") {
				log.Info().Msg("Create constraint table article (category-id-fk) ...")
				db.Exec("ALTER TABLE public.\"initiaRe_article\" ADD CONSTRAINT initiare_article_category_id_fk FOREIGN KEY (category_id) REFERENCES public.\"initiaRe_category\"(id) ON DELETE SET NULL")
			}
		}

		if db.Migrator().HasTable(&article.Article{}) && db.Migrator().HasTable(&category.Category{}) && db.Migrator().HasTable(&articleCategory.ArticleCategory{}) {
			if !db.Migrator().HasConstraint(&articleCategory.ArticleCategory{}, "initiare_article_id_fk") {
				log.Info().Msg("Create constraint table article_category (article-id-fk) ...")
				db.Exec("ALTER TABLE public.\"initiaRe_article_category\" ADD CONSTRAINT initiare_article_id_fk FOREIGN KEY (article_id) REFERENCES public.\"initiaRe_article\"(id) ON DELETE CASCADE")
			}

			if !db.Migrator().HasConstraint(&articleCategory.ArticleCategory{}, "initiare_category_id_fk") {
				log.Info().Msg("Create constraint table article_category (category-id-fk) ...")
				db.Exec("ALTER TABLE public.\"initiaRe_article_category\" ADD CONSTRAINT initiare_category_id_fk FOREIGN KEY (category_id) REFERENCES public.\"initiaRe_category\"(id) ON DELETE CASCADE")
			}
		}

		if db.Migrator().HasTable(&rating.Rating{}) && db.Migrator().HasTable(&article.Article{}) && db.Migrator().HasTable(&user.User{}) {
			if !db.Migrator().HasConstraint(&rating.Rating{}, "initiare_user_id_fk") {
				log.Info().Msg("Create constraint table rating (user-id-fk) ...")
				db.Exec("ALTER TABLE public.\"initiaRe_rating\" ADD CONSTRAINT initiare_user_id_fk FOREIGN KEY (user_id) REFERENCES public.\"initiaRe_user\"(id) ON DELETE CASCADE")
			}

			if !db.Migrator().HasConstraint(&rating.Rating{}, "initiare_article_id_fk") {
				log.Info().Msg("Create constraint table rating (article-id-fk) ...")
				db.Exec("ALTER TABLE public.\"initiaRe_rating\" ADD CONSTRAINT initiare_article_id_fk FOREIGN KEY (article_id) REFERENCES public.\"initiaRe_article\"(id) ON DELETE CASCADE")
			}
		}

		if db.Migrator().HasTable(&userInfo.UserInfo{}) && db.Migrator().HasTable(&user.User{}) {
			if !db.Migrator().HasConstraint(&userInfo.UserInfo{}, "initiare_user_id_fk") {
				log.Info().Msg("Create constraint table user_info (user-id-fk) ...")
				db.Exec("ALTER TABLE public.\"initiaRe_user_info\" ADD CONSTRAINT initiare_user_id_fk FOREIGN KEY (user_id) REFERENCES public.\"initiaRe_user\"(id) ON DELETE CASCADE")
			}
		}

		log.Info().Msg("Migrate relationships done")
	}

	// Seeding data
	if cfg.seedData {
		log.Info().Msg("Seeding data ...")
		seedingCategory(db)
		seedingStatus(db)
		log.Info().Msg("Seeding done")
	}
}

func seedingCategory(db *gorm.DB) {
	objs := []*category.Category{
		{CategoryName: "Mathematics"},
		{CategoryName: "English Literature"},
		{CategoryName: "Vietnamese Literature"},
		{CategoryName: "Physics"},
		{CategoryName: "Chemistry"},
		{CategoryName: "Biology"},
		{CategoryName: "Social Study"},
		{CategoryName: "History"},
		{CategoryName: "IR & Politics"},
	}
	result := db.Create(&objs)
	if result.Error != nil {
		log.Fatal().Msg(result.Error.Error())
	}
}

func seedingStatus(db *gorm.DB) {
	objs := []*models.Status{
		{StatusId: 1, Category: "article", StatusName: "Pending"},
		{StatusId: 2, Category: "article", StatusName: "Approved"},
		{StatusId: 3, Category: "article", StatusName: "Hidden"},
		{StatusId: 1, Category: "user", StatusName: "Active"},
		{StatusId: 2, Category: "user", StatusName: "Inactive"},
	}
	result := db.Create(&objs)
	if result.Error != nil {
		log.Fatal().Msg(result.Error.Error())
	}
}


/*
	--> SQL:
		1. Reset sequence (auto increment) of table
			- alter sequence "seq_name" restart with new_value
*/